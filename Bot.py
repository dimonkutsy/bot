
import telebot
import sqlite3
import re
from telebot import types

bot = telebot.TeleBot('6453843079:AAFHVRXmYAKhssF8INHw6h4WfQ1eZv9pu_I')

@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(50), surname VARCHAR(50), pass VARCHAR(50), version INTEGER DEFAULT 0)')
    conn.commit()
    cur.close()
    conn.close()

    if is_user_authenticated(message.from_user.id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        button1 = types.KeyboardButton('–í—ã–π—Ç–∏')
        markup.add(button1)
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. üòä', reply_markup=markup)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏" –∏ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        button1 = types.KeyboardButton('–í–æ–π—Ç–∏')
        button2 = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        markup.add(button1, button2)
        bot.send_message(message.chat.id, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ üëæ', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–í–æ–π—Ç–∏')
def authenticate_command(message):
    if is_user_authenticated(message.from_user.id):
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. üòä')
    else:
        authenticate(message)

@bot.message_handler(func=lambda message: message.text == '–í—ã–π—Ç–∏')
def logout_command(message):
    if is_user_authenticated(message.from_user.id):
        unmark_user_authenticated(message.from_user.id)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        button1 = types.KeyboardButton('–í–æ–π—Ç–∏')
        button2 = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        markup.add(button1, button2)
        bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏! üëã', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –≤—ã—à–ª–∏. üòä')
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤—ã—à–µ–ª
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        button1 = types.KeyboardButton('–í–æ–π—Ç–∏')
        button2 = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        markup.add(button1, button2)
        bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞? üòâ', reply_markup=markup)

def unmark_user_authenticated(user_id):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("UPDATE users SET version = 0 WHERE id = ?", (user_id,))
    conn.commit()
    cur.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
def register_command(message):
    start_registration(message)

def start_registration(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è üëæ')
    bot.register_next_step_handler(message, user_name)

def user_name(message):
    name = message.text.strip()
    if not validate_russian(name):
        bot.reply_to(message, '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, user_name)
        return
    bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é üëæ')
    bot.register_next_step_handler(message, user_surname, name)

def user_surname(message, name):
    surname = message.text.strip()

    if not validate_russian(surname):
        bot.reply_to(message, '–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, user_surname, name)
        return

    if check_user_exists(name, surname, ''):
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. üö´')
    else:
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîê')
        bot.register_next_step_handler(message, user_pass, name, surname)

def user_pass(message, name, surname):
    password = message.text.strip()

    save_user_data_pass(name, surname, password)
    bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')

def validate_russian(text):
    return bool(re.match(r'^[–∞-—è–ê-–Ø—ë–Å\s]+$', text))

def check_user_exists(name, surname, password):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    if password:
        cur.execute("SELECT * FROM users WHERE name = ? AND surname = ? AND pass = ?", (name, surname, password))
    else:
        cur.execute("SELECT * FROM users WHERE name = ? AND surname = ?", (name, surname))
    user = cur.fetchone()
    cur.close()
    conn.close()
    return user is not None

def save_user_data_pass(name, surname, password):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("INSERT INTO users (name, surname, pass) VALUES (?, ?, ?)", (name, surname, password))
    conn.commit()
    cur.close()
    conn.close()

def is_user_authenticated(user_id):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE id = ? AND version = 1", (user_id,))
    user = cur.fetchone()
    cur.close()
    conn.close()
    return user is not None

def authenticate(message):
    if is_user_authenticated(message.from_user.id):
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. üòä')
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§')
        bot.register_next_step_handler(message, auth_enter_name)

def auth_enter_name(message):
    name = message.text.strip()
    if not validate_russian(name):
        bot.reply_to(message, '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, auth_enter_name)
        return
    bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é üëæ')
    bot.register_next_step_handler(message, auth_enter_surname, name)

def auth_enter_surname(message, name):
    surname = message.text.strip()

    if not validate_russian(surname):
        bot.reply_to(message, '–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, auth_enter_surname, name)
        return

    if not check_user_exists(name, surname, ''):
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. üö´')
        return

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîê')
    bot.register_next_step_handler(message, auth_enter_password, name, surname)

def auth_enter_password(message, name, surname):
    password = message.text.strip()

    if check_user_exists(name, surname, password):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        mark_user_authenticated(message.from_user.id)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        button1 = types.KeyboardButton('–í—ã–π—Ç–∏')
        markup.add(button1)
        bot.send_message(message.chat.id, '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üëç', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. üö´')

def mark_user_authenticated(user_id):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("UPDATE users SET version = 1 WHERE id = ?", (user_id,))
    conn.commit()
    cur.close()
    conn.close()

def unmark_user_authenticated(user_id):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("UPDATE users SET version = 0 WHERE id = ?", (user_id,))
    conn.commit()
    cur.close()
    conn.close()

bot.polling(none_stop=True)