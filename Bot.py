import telebot
import sqlite3
import re
from telebot import types

bot = telebot.TeleBot('6453843079:AAFHVRXmYAKhssF8INHw6h4WfQ1eZv9pu_I')

@bot.message_handler(commands=['start'])
def handle_start(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    button_login = telebot.types.KeyboardButton('–í–æ–π—Ç–∏')
    button_register = telebot.types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    keyboard.add(button_login, button_register)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

@bot.message_handler(commands=['reg'])
@bot.message_handler(func=lambda message: message.text.lower() == "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
def start(message):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(50), surname VARCHAR(50), pass VARCHAR(50), version INTEGER DEFAULT 0, logged_in INTEGER DEFAULT 0)')
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è üëæ')
    bot.register_next_step_handler(message, user_name)

def user_name(message):
    name = message.text.strip()
    if not validate_russian(name):
        bot.reply_to(message, '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, user_name)
        return
    bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é üëæ')
    bot.register_next_step_handler(message, user_surname, name)

def user_surname(message, name):
    surname = message.text.strip()
    if not validate_russian(surname):
        bot.reply_to(message, '–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, user_surname, name)
        return
    if check_user_exists(name, surname):
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é.')
        return
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîê')
    bot.register_next_step_handler(message, user_pass, name, surname)

def user_pass(message, name, surname):
    password = message.text.strip()
    save_user_data_pass(name, surname, password)
    bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')

def validate_russian(text):
    return bool(re.match(r'^[–∞-—è–ê-–Ø—ë–Å\s]+$', text))

def check_user_exists(name, surname):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE name = ? AND surname = ?", (name, surname))
    user = cur.fetchone()
    cur.close()
    conn.close()
    return user is not None

def save_user_data_pass(name, surname, password):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("INSERT INTO users (name, surname, pass) VALUES (?, ?, ?)", (name, surname, password))
    conn.commit()
    cur.close()
    conn.close()

@bot.message_handler(commands=['auth'])
@bot.message_handler(func=lambda message: message.text.lower() == "–≤–æ–π—Ç–∏")
def authenticate(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§')
    bot.register_next_step_handler(message, auth_enter_name)

def auth_enter_name(message):
    name = message.text.strip()
    if not validate_russian(name):
        bot.reply_to(message, '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, auth_enter_name)
        return
    bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é üëæ')
    bot.register_next_step_handler(message, auth_enter_surname, name)

def auth_enter_surname(message, name):
    surname = message.text.strip()
    if not validate_russian(surname):
        bot.reply_to(message, '–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message, auth_enter_surname, name)
        return
    if not check_user_exists(name, surname):
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. üö´')
        return
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîê')
    bot.register_next_step_handler(message, auth_enter_password, name, surname)


def auth_enter_password(message, name, surname):
    password = message.text.strip()
    if check_password(name, surname, password):
        bot.send_message(message.chat.id, '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üëç')
        set_logged_in(name, surname, 1)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. üö´')

def check_password(name, surname, password):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE name = ? AND surname = ? AND pass = ?", (name, surname, password))
    user = cur.fetchone()
    cur.close()
    conn.close()
    return user is not None


def set_logged_in(name, surname, value):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("UPDATE users SET logged_in = ? WHERE name = ? AND surname = ?", (value, name, surname))
    conn.commit()
    cur.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text.lower() == "–≤—ã–π—Ç–∏")
def handle_logout(message):
    name = get_user_name(message)
    surname = get_user_surname(message)
    if name and surname:
        set_logged_in(name, surname, 0)
        bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. üëã')
    else:
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ.')

def get_user_name(message):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("SELECT name FROM users WHERE logged_in = 1")
    row = cur.fetchone()
    cur.close()
    conn.close()
    if row:
        return row[0]
    return None

def get_user_surname(message):
    conn = sqlite3.connect('bd.sql')
    cur = conn.cursor()
    cur.execute("SELECT surname FROM users WHERE logged_in = 1")
    row = cur.fetchone()
    cur.close()
    conn.close()
    if row:
        return row[0]
    return None

bot.polling(none_stop=True)

#while True:
#    try:
#        bot.polling(none_stop=True)
#    except Exception as e:
#        print(e)
#        continue